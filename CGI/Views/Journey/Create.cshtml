@using Microsoft.AspNetCore.Mvc.TagHelpers
@using CGI.Extensions
@model Stopover

@{
    ViewData["Title"] = "Create Stopovers for Journey";
}
<style>

    #StopoverList {
        overflow-y: auto;
    }

    .stopover-item {
        background: #f8f8f8;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .stopover-start,
    .stopover-end,
    .stopover-vehicle,
    .stopover-distance,
    .stopover-emission {
        display: inline-block;
        margin-right: 10px;
    }

    .edit-stopover,
    .delete-stopover {
        background-color: #4CAF50; /* Green */
        border: none;
        color: white;
        padding: 5px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
    }

    .edit-stopver {
        background-color: #FFD700; /* Yellow */
    }

    .edit-stopver:hover {
        background-color: #DAA520; /* Darker yellow */
    }

    .delete-stopver:hover {
        background-color: #3e8e41; /* Darker green */
    }





</style>

<body>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
        $(function () {
            // Get the JourneyID from LocalStorage
            var journeyId = localStorage.getItem('JourneyID');

            // Set the value of the hidden field
            $('#journeyId').val(journeyId);

            // Function to check if a journey exists and create one if it doesn't
            async function checkAndCreateJourney() {
                let journeyId = localStorage.getItem('JourneyID');
                let userId = localStorage.getItem('User_ID');
                if (!journeyId) {
                    let response = await fetch('/Journey/CreateAndGetJourneyId?userId=' + userId);
                    if (response.ok) {
                        let jsonResponse = await response.json();
                        if (jsonResponse.success) {
                            localStorage.setItem('JourneyID', jsonResponse.journeyId);
                        }
                    } else {
                        console.error('Failed to create a new journey:', response.statusText);
                    }
                }
            }

            // Function to fetch all stopovers based on JourneyID
            async function fetchStopovers() {
                let journeyId = localStorage.getItem('JourneyID');
                let response = await fetch('/StopOver/Index?id=' + journeyId);
                if (response.ok) {
                    let stopovers = await response.json();
                    displayStopovers(stopovers);
                } else {
                    console.error('Failed to fetch stopovers:', response.statusText);
                }
            }


            // Function to display stopovers on the page
            function displayStopovers(stopovers) {
                let stopoverList = $('#StopoverList');
                stopoverList.empty();
                let list = $('<ol></ol>');
                for (let i = 0; i < stopovers.length; i++) {
                    let stopover = stopovers[i];
                    let stopoverItem = $('<li class="stopover-item"></li>');
                    let startEndRow = $('<div class="stopover-start-end"></div>');
                    if (i === 0) {
                        startEndRow.append('<span class="stopover-start"><strong>Start:</strong> ' + stopover.start + '</span>');
                    } else {
                        startEndRow.append('<span class="stopover-start">Start: ' + stopover.start + '</span>');
                    }
                    if (i === stopovers.length - 1) {
                        startEndRow.append('<span class="stopover-end"><strong>End:</strong> ' + stopover.end + '</span>');
                    } else {
                        startEndRow.append('<span class="stopover-end">End: ' + stopover.end + '</span>');
                    }
                    stopoverItem.append(startEndRow);
                    let vehicleDistanceRow = $('<div class="stopover-vehicle-distance"></div>');
                    vehicleDistanceRow.append('<span class="stopover-vehicle">Vehicle: ' + stopover.vehicleType + '</span>');
                    vehicleDistanceRow.append('<span class="stopover-distance">Distance: ' + stopover.distance + '</span>');
                    stopoverItem.append(vehicleDistanceRow);
                    let emissionButtonsRow = $('<div class="stopover-emission-buttons"></div>');
                    emissionButtonsRow.append('<span class="stopover-emission">Emission: ' + stopover.emission + '</span>');
                    emissionButtonsRow.append('<button class="edit-stopover" data-id="' + stopover.stopover_ID + '">Edit</button>');
                    emissionButtonsRow.append('<button class="delete-stopover" data-id="' + stopover.stopover_ID + '">Delete</button>');
                    stopoverItem.append(emissionButtonsRow);
                    list.append(stopoverItem);
                }
                stopoverList.append(list);

                // Show the Submit Journey button if there is at least one stopover
                if (stopovers.length > 0) {
                    $('#submitJourneyBtn').show();
                } else {
                    $('#submitJourneyBtn').hide();
                }
            }








            // Function to handle form submission for creating a new stopover
            $('form').on('submit', async function (event) {
                event.preventDefault();

                // Set the value of the hidden VehicleType input field
                $('#VehicleType').val($('#vehicle').val());

                let formData = new FormData(event.target);
                let response = await fetch('/StopOver/CreateStopOver', {
                    method: 'POST',
                    body: formData
                });
                if (response.ok) {
                    let jsonResponse = await response.json();
                    if (jsonResponse.success) {
                        fetchStopovers();
                        event.target.reset();
                    } else {
                        console.error('Failed to create a new stopover:', jsonResponse.message);
                    }
                } else {
                    console.error('Failed to create a new stopover:', response.statusText);
                }
            });


            // Function to handle clicking the edit button for a stopover
            $('#StopoverList').on('click', '.edit-stopover', function () {
                let stopoverId = $(this).data('id');
                window.location.href = '/StopOver/Edit?id=' + stopoverId;
            });

            // Function to handle clicking the delete button for a stopover
            $('#StopoverList').on('click', '.delete-stopover', async function () {
                let stopoverId = $(this).data('id');
                let response = await fetch('/StopOver/Delete?stopoverid=' + stopoverId, {
                    method: 'POST'
                });
                if (response.ok) {
                    fetchStopovers();
                } else {
                    console.error('Failed to delete stopover:', response.statusText);
                }
            });

            // Check if a journey exists and create one if it doesn't
            checkAndCreateJourney();

            // Fetch all stopovers based on JourneyID
            fetchStopovers();
        });
    </script>

    <!-- Main layout of the page -->
    <div class="flex justify-center items-center h-screen bg-slate-200">
        <div class="block bg-slate-100 p-6 rounded-lg shadow-md shadow-slate-300 w-90 grid grid-cols-2 gap-4">
            <div class=text-lg>Register new stopover:</div>
            <br>
            <div class="block bg-slate-50 p-6 rounded-lg shadow-md shadow-slate-300 w-90 max-h-96">
                <!-- Form for adding a new stopover -->
                <form method="post" action="/StopOver/CreateStopOver">
                    <input type="hidden" name="journeyId" id="journeyId" value="">
                    <!-- Input fields for starting location, end location, vehicle, and distance -->
                    <label>Starting Location:</label>
                    <br>
                    <input asp-for="Start" class="shadow appearance-none border border-black rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="startinglocation" placeholder="Input starting location." required>
                    <label>End Location:</label>
                    <br>
                    <input asp-for="End" class="shadow appearance-none border border-black rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="endlocation" placeholder="Input end location." required>
                    <label>Vehicle:</label>
                    <br>
                    <input type="hidden" asp-for="VehicleType" id="VehicleType" />
                    <select id="vehicle" class="shadow appearance-none border border-black rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" required>
                        <optgroup label="Electric">
                            <option value="@Vehicle_ID.ETrain">@Vehicle_ID.ETrain.GetDisplayName()</option>
                            <option value="@Vehicle_ID.EBicycle">@Vehicle_ID.EBicycle.GetDisplayName()</option>
                            <option value="@Vehicle_ID.EScooter">@Vehicle_ID.EScooter.GetDisplayName()</option>
                            <option value="@Vehicle_ID.ECar">@Vehicle_ID.ECar.GetDisplayName()</option>
                        </optgroup>
                        <optgroup label="Gasoline">
                            <option value="@Vehicle_ID.GScooter">@Vehicle_ID.GScooter.GetDisplayName()</option>
                            <option value="@Vehicle_ID.GMotorcycle">@Vehicle_ID.GMotorcycle.GetDisplayName()</option>
                            <option value="@Vehicle_ID.GCar">@Vehicle_ID.GCar.GetDisplayName()</option>
                        </optgroup>
                        <optgroup label="Hybrid">
                            <option value="@Vehicle_ID.HCar">@Vehicle_ID.HCar.GetDisplayName()</option>
                        </optgroup>
                        <optgroup label="Diesel">
                            <option value="@Vehicle_ID.DTrain">@Vehicle_ID.DTrain.GetDisplayName()</option>
                            <option value="@Vehicle_ID.DCar">@Vehicle_ID.DCar.GetDisplayName()</option>
                        </optgroup>
                        <optgroup label="Other">
                            <option value="@Vehicle_ID.Walking">@Vehicle_ID.Walking.GetDisplayName()</option>
                            <option value="@Vehicle_ID.Bicycle">@Vehicle_ID.Bicycle.GetDisplayName()</option>
                            <option value="@Vehicle_ID.Tram">@Vehicle_ID.Tram.GetDisplayName()</option>
                            <option value="@Vehicle_ID.Bus">@Vehicle_ID.Bus.GetDisplayName()</option>
                            <option value="@Vehicle_ID.Metro">@Vehicle_ID.Metro.GetDisplayName()</option>
                        </optgroup>
                    </select>

                    <label>Distance in km:</label>
                    <br>
                    <input asp-for="Distance" class="shadow appearance-none border border-black rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="distance" placeholder="Input distance in km." required>
                    <!-- Add button to submit the form -->
                    <button class="bg-blue-700 rounded-lg w-full text-white min-h-fit">Add</button>
                </form>
            </div>
            <div class="block bg-slate-50 p-6 rounded-lg shadow-md shadow-slate-300 w-90 flex-none flex-col max-h-96">
                <div>Stopovers:</div>
                <!-- List to display stopovers -->
                <div class="h-5/6" id="StopoverList"></div>
                <button id="submitJourneyBtn" class="bg-green-700 rounded-lg w-full text-white hidden">Submit Journey</button>
            </div>
        </div>
    </div>
</body>